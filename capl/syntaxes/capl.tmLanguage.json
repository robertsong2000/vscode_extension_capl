{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "CAPL",
    "patterns": [
        { "include": "#comments" },
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#operators" },
        { "include": "#functions" },
        { "include": "#variables" },
        { "include": "#preprocessor" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.capl",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.capl",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": { "name": "punctuation.definition.comment.capl" }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.capl",
                    "match": "\\b(if|else|while|do|for|return|switch|case|default|break|continue|goto)\\b"
                },
                {
                    "name": "keyword.other.capl",
                    "match": "\\b(on|message|timer|key|start|envvar|msTimer|includes|variables|void|this)\\b"
                },
                {
                    "name": "storage.type.capl",
                    "match": "\\b(int|byte|word|dword|long|float|double|char|message|timer|msTimer|byte\\[\\])\\b"
                },
                {
                    "name": "constant.language.capl",
                    "match": "\\b(true|false|NULL|IDIS_NORMAL|IDIS_CYCLIC|IDIS_SPONTAN|IDIS_NONE)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.capl",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.capl",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.capl",
                    "match": "\\b0[xX][0-9a-fA-F]+\\b"
                },
                {
                    "name": "constant.numeric.decimal.capl",
                    "match": "\\b([0-9]+\\.[0-9]*|\\.?[0-9]+)([eE][+-]?[0-9]+)?[fFlL]?\\b"
                },
                {
                    "name": "constant.numeric.integer.capl",
                    "match": "\\b[0-9]+[uU]?[lL]?\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.capl",
                    "match": "=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>="
                },
                {
                    "name": "keyword.operator.arithmetic.capl",
                    "match": "\\+|\\-|\\*|/|%|\\+\\+|\\-\\-"
                },
                {
                    "name": "keyword.operator.logical.capl",
                    "match": "&&|\\|\\||!|==|!=|<|>|<=|>="
                },
                {
                    "name": "keyword.operator.bitwise.capl",
                    "match": "&|\\||\\^|~|<<|>>"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.capl",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
                },
                {
                    "name": "support.function.capl",
                    "match": "\\b(write|writeEx|output|outputEx|cancelTimer|setTimer|resetTimer|getTimerState|getSystemTime|getSystemVar|putSystemVar|getEnvVar|putEnvVar|elCount|elType|elRaw|elPhysical|bytearray|getValue|setValue|getSignal|setSignal|getMinValue|getMaxValue|getValueText|getValueRaw|setValueRaw|getValuePhys|setValuePhys|getValueSeq|setValueSeq|getValueRange|setValueRange|getValueRangeRaw|setValueRangeRaw|getValueRangePhys|setValueRangePhys|getValueRangeSeq|setValueRangeSeq|getArrayDim|getArrayDimMax|getArrayDimMin|getArrayValue|setArrayValue|getArrayValueRaw|setArrayValueRaw|getArrayValuePhys|setArrayValuePhys|getArrayValueSeq|setArrayValueSeq|getArrayValueRange|setArrayValueRange|getArrayValueRangeRaw|setArrayValueRangeRaw|getArrayValueRangePhys|setArrayValueRangePhys|getArrayValueRangeSeq|setArrayValueRangeSeq)\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.capl",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "preprocessor": {
            "patterns": [
                {
                    "name": "meta.preprocessor.capl",
                    "match": "^\\s*#\\s*(include|define|undef|if|ifdef|ifndef|else|elif|endif|pragma)\\b"
                }
            ]
        }
    },
    "scopeName": "source.capl"
}